name: Auto Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'بيئة النشر'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'إجبار النشر'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: 'MedicalLabAnalyzer.sln'
  PROJECT_FILE: 'MedicalLabAnalyzer.csproj'

jobs:
  build-and-package:
    runs-on: windows-latest
    
    outputs:
      package-path: ${{ steps.package.outputs.path }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Get version
      id: version
      run: |
        $version = "1.0.0"
        if ($env:GITHUB_REF -like "refs/tags/v*") {
          $version = $env:GITHUB_REF -replace "refs/tags/v", ""
        } else {
          $version = "$version.${{ github.run_number }}"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_FILE }} --configuration Release --no-build --verbosity normal

    - name: Publish application
      run: |
        dotnet publish ${{ env.PROJECT_FILE }} --configuration Release --runtime win-x64 --self-contained true --output publish/win-x64 --verbosity normal

    - name: Create deployment package
      id: package
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $packageName = "MedicalLabAnalyzer_v${version}_win-x64"
        $distPath = "dist"
        $publishPath = "publish/win-x64"
        
        # إنشاء مجلد التوزيع
        New-Item -ItemType Directory -Path "$distPath/$packageName" -Force
        
        # نسخ الملفات المنشورة
        Copy-Item -Path "$publishPath/*" -Destination "$distPath/$packageName/" -Recurse -Force
        
        # نسخ ملفات إضافية
        Copy-Item -Path "README.md" -Destination "$distPath/$packageName/" -Force
        Copy-Item -Path "INSTALLATION_GUIDE.md" -Destination "$distPath/$packageName/" -Force
        Copy-Item -Path "QUICK_START.md" -Destination "$distPath/$packageName/" -Force
        Copy-Item -Path "CHANGELOG.txt" -Destination "$distPath/$packageName/" -Force
        
        # إنشاء ملف appsettings.json
        @"
{
  "ConnectionStrings": {
    "DefaultConnection": "Data Source=Database/medical_lab.db"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "Database": {
    "AutoMigrate": true,
    "SeedData": true
  },
  "Reports": {
    "OutputPath": "Reports/GeneratedReports",
    "ArchivePath": "Reports/Archive",
    "TemplatePath": "Reports/Templates"
  },
  "Security": {
    "JwtSecret": "your-super-secret-jwt-key-change-in-production",
    "JwtExpirationHours": 24
  },
  "Version": "$version",
  "BuildDate": "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')",
  "Environment": "${{ github.event.inputs.environment || 'production' }}"
}
"@ | Out-File -FilePath "$distPath/$packageName/appsettings.json" -Encoding UTF8
        
        # إنشاء ZIP
        Compress-Archive -Path "$distPath/$packageName/*" -DestinationPath "$distPath/${packageName}.zip" -Force
        
        # إنشاء ملف معلومات الإصدار
        @"
MedicalLabAnalyzer v$version
Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
Commit: ${{ github.sha }}
Branch: ${{ github.ref_name }}
Environment: ${{ github.event.inputs.environment || 'production' }}
"@ | Out-File -FilePath "$distPath/${packageName}_info.txt" -Encoding UTF8
        
        echo "path=$distPath/${packageName}.zip" >> $env:GITHUB_OUTPUT
        echo "Package created: $distPath/${packageName}.zip"

    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: dist/*.zip

  deploy-to-staging:
    needs: build-and-package
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: staging/

    - name: Deploy to staging server
      run: |
        Write-Host "Deploying to staging environment..."
        Write-Host "Version: ${{ needs.build-and-package.outputs.version }}"
        Write-Host "Package: ${{ needs.build-and-package.outputs.package-path }}"
        
        # هنا يمكن إضافة خطوات النشر الفعلية إلى خادم الاختبار
        # مثال: نسخ الملفات إلى مجلد مشترك أو خادم FTP
        
        Write-Host "Staging deployment completed successfully!"

    - name: Notify staging deployment
      run: |
        Write-Host "✅ Staging deployment completed!"
        Write-Host "Version: ${{ needs.build-and-package.outputs.version }}"
        Write-Host "Environment: staging"

  deploy-to-production:
    needs: build-and-package
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: production/

    - name: Deploy to production server
      run: |
        Write-Host "Deploying to production environment..."
        Write-Host "Version: ${{ needs.build-and-package.outputs.version }}"
        Write-Host "Package: ${{ needs.build-and-package.outputs.package-path }}"
        
        # هنا يمكن إضافة خطوات النشر الفعلية إلى خادم الإنتاج
        # مثال: نسخ الملفات إلى خادم الإنتاج أو خدمة سحابية
        
        Write-Host "Production deployment completed successfully!"

    - name: Create production release
      uses: softprops/action-gh-release@v2
      with:
        files: production/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        title: MedicalLabAnalyzer ${{ needs.build-and-package.outputs.version }}
        body: |
          ## 🎉 MedicalLabAnalyzer ${{ needs.build-and-package.outputs.version }}
          
          ### 🚀 تم النشر إلى الإنتاج
          - ✅ بناء ناجح
          - ✅ اختبارات مكتملة
          - ✅ نشر آمن
          
          ### 📦 التثبيت:
          1. قم بتحميل الملف المضغوط
          2. استخراج الملفات
          3. تشغيل `MedicalLabAnalyzer.exe`
          
          ### 📋 المتطلبات:
          - Windows 10/11 (64-bit)
          - .NET 8.0 Runtime
          
          ### 🔧 المستخدمين الافتراضيين:
          - **admin/admin** - مدير
          - **lab/123** - فني مختبر
          - **reception/123** - مستقبل
          
          ### 📞 الدعم:
          - راجع `INSTALLATION_GUIDE.md` للتفاصيل
          - راجع `README.md` للتوثيق الشامل
          
          ---
          
          **MedicalLabAnalyzer** - نظام إدارة مختبر طبي متقدم 🏥✨
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify production deployment
      run: |
        Write-Host "✅ Production deployment completed!"
        Write-Host "Version: ${{ needs.build-and-package.outputs.version }}"
        Write-Host "Environment: production"
        Write-Host "Release created successfully!"

  health-check:
    needs: [deploy-to-staging, deploy-to-production]
    runs-on: windows-latest
    if: always()
    
    steps:
    - name: Health check staging
      if: needs.deploy-to-staging.result == 'success'
      run: |
        Write-Host "Performing health check on staging environment..."
        # هنا يمكن إضافة فحص صحة التطبيق في بيئة الاختبار
        
    - name: Health check production
      if: needs.deploy-to-production.result == 'success'
      run: |
        Write-Host "Performing health check on production environment..."
        # هنا يمكن إضافة فحص صحة التطبيق في بيئة الإنتاج

  notify-deployment:
    needs: [deploy-to-staging, deploy-to-production, health-check]
    runs-on: windows-latest
    if: always()
    
    steps:
    - name: Deployment summary
      run: |
        Write-Host "=== Deployment Summary ==="
        Write-Host "Version: ${{ needs.build-and-package.outputs.version }}"
        Write-Host "Commit: ${{ github.sha }}"
        Write-Host "Branch: ${{ github.ref_name }}"
        
        if [ "${{ needs.deploy-to-staging.result }}" == "success" ]; then
          echo "✅ Staging: Success"
        else
          echo "❌ Staging: Failed"
        fi
        
        if [ "${{ needs.deploy-to-production.result }}" == "success" ]; then
          echo "✅ Production: Success"
        else
          echo "❌ Production: Failed"
        fi
        
        Write-Host "=========================="