name: Build and Test - Enhanced

on:
  push:
    branches: [ main, develop, 'cursor/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  DOTNET_VERSION: '8.0.x'
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: 1

jobs:
  build:
    runs-on: windows-2022  # Use Windows Server 2022 explicitly to avoid migration notice
    timeout-minutes: 45  # Increased timeout
    strategy:
      matrix:
        configuration: [Debug, Release]
      fail-fast: false  # Don't cancel other jobs if one fails
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: System Information & Health Check
      run: |
        echo "=== System Health Check ==="
        echo "Available disk space:"
        Get-WmiObject -Class Win32_LogicalDisk | Where-Object DriveType -eq 3 | Format-Table DeviceID, @{Name="Size(GB)";Expression={[math]::Round($_.Size/1GB,2)}}, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}
        echo "Memory info:"
        $memory = Get-WmiObject -Class Win32_ComputerSystem
        echo "Total Physical Memory: $([math]::Round($memory.TotalPhysicalMemory/1GB,2)) GB"
        echo "Network connectivity test:"
        Test-NetConnection api.nuget.org -Port 443 -InformationLevel Detailed
        echo "PowerShell version:"
        $PSVersionTable.PSVersion
        echo "=== End System Health Check ==="
      shell: pwsh
      continue-on-error: true
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Enhanced NuGet Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          %USERPROFILE%\.nuget\packages
          ${{ github.workspace }}/.nuget/packages
          ${{ github.workspace }}/.nuget/global-packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json', '**/Directory.Build.props', '**/nuget.config') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Pre-restore cleanup
      run: |
        echo "Cleaning up before restore..."
        dotnet nuget locals all --clear
        dotnet clean MedicalLabAnalyzer.sln --verbosity minimal
        echo "Cleanup completed"
      continue-on-error: true
          
    - name: Restore dependencies - Primary
      id: restore
      run: |
        echo "Starting enhanced package restore..."
        dotnet restore MedicalLabAnalyzer.sln --verbosity normal --runtime win-x64 --disable-parallel:false --force
        echo "Primary restore completed successfully"
        
    - name: Restore dependencies - Fallback
      if: failure() && steps.restore.outcome == 'failure'
      run: |
        echo "Primary restore failed, attempting fallback restore..."
        dotnet nuget locals all --clear
        dotnet restore MedicalLabAnalyzer.sln --verbosity diagnostic --runtime win-x64 --force --no-cache --ignore-failed-sources
        echo "Fallback restore completed"
        
    - name: Validate restore success
      run: |
        Write-Host "Validating package restore..."
        $mainProjectAssets = "src/MedicalLabAnalyzer/obj/project.assets.json"
        $testProjectAssets = "tests/MedicalLabAnalyzer.Tests/obj/project.assets.json"
        
        if (Test-Path $mainProjectAssets) {
          Write-Host "✅ Main project assets restored successfully"
          $assets = Get-Content $mainProjectAssets | ConvertFrom-Json
          Write-Host "Project: $($assets.projectName)"
          Write-Host "Target: $($assets.targets.Keys | Select-Object -First 1)"
        } else {
          Write-Host "❌ Main project assets missing"
          exit 1
        }
        
        if (Test-Path $testProjectAssets) {
          Write-Host "✅ Test project assets restored successfully"
        } else {
          Write-Host "⚠️ Test project assets missing - this may be normal"
        }
        
        Write-Host "Package validation completed successfully"
      shell: pwsh
        
    - name: Generate package lock files if missing
      run: |
        Write-Host "Checking for package lock files..."
        try {
          $lockFiles = Get-ChildItem -Recurse -Filter "packages.lock.json" -ErrorAction SilentlyContinue
          if ($lockFiles.Count -eq 0) {
            Write-Host "No lock files found. Generating lock files..."
            dotnet restore MedicalLabAnalyzer.sln --force-evaluate --locked-mode
            Write-Host "Checking for generated lock files..."
            $newLockFiles = Get-ChildItem -Recurse -Filter "packages.lock.json" -ErrorAction SilentlyContinue
            if ($newLockFiles.Count -gt 0) {
              Write-Host "Lock files generated:"
              $newLockFiles | ForEach-Object { Write-Host "  $($_.FullName)" }
            } else {
              Write-Host "Warning: No lock files were generated. This may be normal for some project types."
            }
          } else {
            Write-Host "Lock files already exist:"
            $lockFiles | ForEach-Object { Write-Host "  $($_.FullName)" }
          }
        } catch {
          Write-Host "Error checking lock files: $($_.Exception.Message)"
          Write-Host "Continuing with build process..."
        }
      shell: pwsh
      continue-on-error: true
      
    - name: Build solution
      run: |
        echo "Building solution with configuration: ${{ matrix.configuration }}"
        dotnet build MedicalLabAnalyzer.sln --configuration ${{ matrix.configuration }} --no-restore --runtime win-x64 --verbosity normal
        echo "Build completed successfully"
      shell: pwsh
      
    - name: Diagnose build issues on failure
      if: failure()
      run: |
        Write-Host "=== Build Failed - Diagnostic Information ==="
        Write-Host "Checking for common build issues..."
        
        # Check if solution file exists
        if (Test-Path "MedicalLabAnalyzer.sln") {
          Write-Host "✓ Solution file found"
        } else {
          Write-Host "✗ Solution file not found"
        }
        
        # Check project files
        Get-ChildItem -Recurse -Filter "*.csproj" | ForEach-Object {
          Write-Host "Found project: $($_.FullName)"
        }
        
        # Check for missing packages
        Write-Host "Checking NuGet packages..."
        dotnet restore MedicalLabAnalyzer.sln --verbosity diagnostic | Select-String -Pattern "error|warning|failed" | ForEach-Object { Write-Host $_ }
        
        # Check target framework
        Write-Host "Checking target frameworks..."
        Get-Content "src/MedicalLabAnalyzer/MedicalLabAnalyzer.csproj" | Select-String -Pattern "TargetFramework"
        
        # Check EmguCV dependencies
        Write-Host "Checking EmguCV dependencies..."
        $emguCVPath = "$env:USERPROFILE\.nuget\packages\emgu.cv.runtime.windows\4.8.1.5350\runtimes\win-x64\native"
        if (Test-Path $emguCVPath) {
          Write-Host "✓ EmguCV runtime found at: $emguCVPath"
          Get-ChildItem $emguCVPath | ForEach-Object { Write-Host "  - $($_.Name)" }
        } else {
          Write-Host "✗ EmguCV runtime not found at: $emguCVPath"
        }
      shell: pwsh
      
    - name: Create test results directory
      run: |
        Write-Host "Creating TestResults directory..."
        New-Item -ItemType Directory -Path "TestResults" -Force
        Write-Host "TestResults directory created: $(Test-Path 'TestResults')"
      shell: pwsh
      
    - name: Run tests
      run: |
        echo "Running tests for configuration: ${{ matrix.configuration }}"
        dotnet test MedicalLabAnalyzer.sln --configuration ${{ matrix.configuration }} --no-build --verbosity normal --logger trx --results-directory TestResults --collect:"XPlat Code Coverage"
        echo "Tests completed successfully"
      shell: pwsh
      continue-on-error: true
      
    - name: Upload build artifacts (Release only)
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: medical-lab-analyzer-release-${{ github.sha }}
        path: |
          src/MedicalLabAnalyzer/bin/Release/
        retention-days: 30
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: test-results-${{ matrix.configuration }}-${{ github.sha }}
        path: |
          TestResults/**/*.trx
          TestResults/**/*.xml
          TestResults/**/*.coverage
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Upload diagnostic logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: diagnostic-logs-${{ matrix.configuration }}-${{ github.sha }}
        path: |
          **/*.binlog
          **/*.log
          **/obj/project.assets.json
          **/nuget.config
        retention-days: 7
        if-no-files-found: ignore